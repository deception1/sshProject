<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.2.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
           http://cxf.apache.org/jaxws
           http://cxf.apache.org/schemas/jaxws.xsd
           http://cxf.apache.org/bindings/soap
           http://cxf.apache.org/schemas/configuration/soap.xsd">

	<!--引入源文件 jdbc.properties-->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:jdbc.properties</value>                                                 <!--指定源文件路径 -->
		</property>
	</bean>
	<!--引入源文件 end-->
	<!--配置连接数据源-->
	<bean id="DataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${driverClass}" />                                       <!--连接数据库的驱动类 -->
		<property name="jdbcUrl" value="${jdbcUrl}" />                                               <!--连接数据库的url -->
		<property name="user" value="${user}" />                                                     <!--连接数据库的用户名 -->
		<property name="password" value="${password}" />                                             <!--连接数据库的密码 -->
		<property name="maxPoolSize" value="${maxPoolSize}" />                                       <!--连接池的最大连接数 -->
		<property name="minPoolSize" value="${minPoolSize}" />                                       <!--连接池的最小连接数 -->
		<property name="initialPoolSize" value="${initialPoolSize}" />                               <!--初始化连接数 -->
		<property name="maxIdleTime" value="${maxIdleTime}" />                                       <!--连接的最大空闲时间，超时的连接将被丢弃，单位：秒 -->
		<property name="checkoutTimeout" value="${checkoutTimeout}" />                               <!--没有连接可用时，等待连接的时间，单位：毫秒 -->
	</bean>
	<!--配置连接数据源 end-->
	<!--配置会话工厂-->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="DataSource" />                                              <!--引入数据源-->
		<property name="hibernateProperties">                                                        <!--定义Hibernate的SessionFactory的属性 -->
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.Oracle9Dialect</prop>            <!--定义Hibernate连接数据库的方言{Oracle[org.hibernate.dialect.Oracle9Dialect],MySQL[org.hibernate.dialect.MySQLDialect]} -->
				<prop key="hibernate.show_sql">true</prop>                                           <!--设置控制台显示SQL语句 -->
				<prop key="hibernate.format_sql">true</prop>                                         <!--设置控制台显示SQL语句 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>                                     <!--设置自动映射实体类到数据库表 -->
			</props>
		</property>                                                                                  <!--定义Hibernate的SessionFactory的属性  end-->
		<property name="mappingDirectoryLocations">                                                           <!--使用mappingResources属性设置实体类映射文件 -->
			<list>
				<value>classpath:com.shop.www.*.entity</value>
			</list>
		</property>                                                                                  <!--使用mappingResources属性设置实体类映射文件  end-->
	</bean>
	<!--配置会话工厂 end-->
	<!--配置Hibernate的事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">                      <!--HibernateTransactionManager bean需要依赖注入一个SessionFactory bean的引用-->
		<property name="sessionFactory" ref="sessionFactory"></property>                             <!--引入会话工厂sessionFactory-->
	</bean>
	<!--配置Hibernate的事务管理器  end-->
	<!--配置那些类的方法进行事务管理,需要aopalliance-1.0.jar和aspectjweaver.jar，当前com.neusoft.leehom.service包中的子包， 
		类中所有方法需要，还需要参考tx:advice的设置 需要引入tx的命名空间 这是事务通知操作，使用的事务管理器引用自 transactionManager -->
	<!--定义事务通知-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">                               <!--引入事务管理器transactionManager-->
		<tx:attributes>                                                                              <!--定义属性，声明事务规则-->
			<tx:method name="query*"  read-only="true" />
			<tx:method name="find*"   read-only="true" />
			<tx:method name="get*"    read-only="true" /> 
			<tx:method name="look*"   read-only="true" /> 
			<tx:method name="select*" read-only="true" /> 
			<tx:method name="check*"  read-only="true" /> 
			<tx:method name="save*"   propagation="REQUIRED" /> 
			<tx:method name="add*" 	  propagation="REQUIRED" />  
			<tx:method name="insert*" propagation="REQUIRED" />                                      <!--指定哪些方法需要加入事务，这里懒惰一下全部加入，可以使用通配符来只加入需要的方法 -->
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="*"       propagation="REQUIRED"  read-only="true" />
		</tx:attributes>                                                                             <!--定义属性，声明事务规则 end-->
	</tx:advice>
	<!--定义事务通知 end-->
	<!--配置aop，需要引入aop的命名空间 -->
	<aop:config>
		<aop:pointcut id="daoMethods" expression="execution(* com.shop.www.*.bizimpl.*.*(..))" />          <!--切入点指明了在执行Service的所有方法时产生事务拦截操作 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="daoMethods" />                              <!--将事务通知与应用规则的方法组合(定义了将采用何种拦截操作，这里引用到 txAdvice)-->
	</aop:config>
	<!--配置aop end-->

	<!-- Dao -->
	<bean id="Dao" class="com.shop.www.daoimpl.DaoImpl">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<!-- Dao end-->
	
	
	<!-- Biz -->
	
	<!-- Biz end-->
	
	
	<!-- Action -->
	<bean id="Action" class="com.shop.www.*.action.Action" scope="prototype">
		
	</bean>
	<!-- Action end-->

</beans>
